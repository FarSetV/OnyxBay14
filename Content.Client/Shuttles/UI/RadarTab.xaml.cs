using Content.Shared.Shuttles.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Physics.Components;
using Robust.Shared.Utility;

namespace Content.Client.Shuttles.UI;

[GenerateTypedNameReferences]
public sealed partial class RadarTab : Control
{
    /// <summary>
    ///     Stored by grid entityid then by states
    /// </summary>
    private readonly Dictionary<EntityUid, List<DockingInterfaceState>> _docks = new();

    [Dependency] private readonly IEntityManager _entManager = default!;

    /// <summary>
    ///     Currently selected dock button for camera.
    /// </summary>
    private BaseButton? _selectedDock;

    private EntityUid? _shuttleUid;
    public Action<EntityUid>? StartAutodockPressed;
    public Action<EntityUid>? StopAutodockPressed;
    public Action<EntityUid>? UndockPressed;

    public RadarTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        UndockButton.OnPressed += OnUndockPressed;
        OnRadarRangeChange(RadarScreen.RadarRange);
        RadarScreen.OnRadarRangeChanged += OnRadarRangeChange;

        IFFToggle.OnToggled += OnIFFTogglePressed;
        IFFToggle.Pressed = RadarScreen.ShowIFF;

        DockToggle.OnToggled += OnDockTogglePressed;
        DockToggle.Pressed = RadarScreen.ShowDocks;
    }

    private void OnIFFTogglePressed(BaseButton.ButtonEventArgs args)
    {
        RadarScreen.ShowIFF ^= true;
        args.Button.Pressed = RadarScreen.ShowIFF;
    }

    private void OnDockTogglePressed(BaseButton.ButtonEventArgs args)
    {
        RadarScreen.ShowDocks ^= true;
        args.Button.Pressed = RadarScreen.ShowDocks;
    }

    private void OnRadarRangeChange(float value)
    {
        RadarRange.Text = $"{value:0}";
    }

    private void OnUndockPressed(BaseButton.ButtonEventArgs args)
    {
        if (DockingScreen.ViewedDock == null)
            return;
        UndockPressed?.Invoke(DockingScreen.ViewedDock.Value);
    }

    public void SetMatrix(EntityCoordinates? coordinates, Angle? angle)
    {
        _shuttleUid = coordinates?.EntityId;
        RadarScreen.SetMatrix(coordinates, angle);
    }

    public void UpdateState(RadarConsoleBoundInterfaceState state)
    {
        SetMatrix(state.Coordinates, state.Angle);
        UpdateDocks(state.Docks);
        RadarScreen.UpdateState(state);
        MaxRadarRange.Text = $"{state.MaxRange:0}";
    }

    private void UpdateDocks(List<DockingInterfaceState> docks)
    {
        // TODO: We should check for changes so any existing highlighted doesn't delete.
        // We also need to make up some pseudonumber as well for these.
        _docks.Clear();

        foreach (var dock in docks)
        {
            var grid = _docks.GetOrNew(dock.Coordinates.EntityId);
            grid.Add(dock);
        }

        DockPorts.DisposeAllChildren();
        DockingScreen.Docks = _docks;

        if (_shuttleUid != null && _docks.TryGetValue(_shuttleUid.Value, out var gridDocks))
        {
            var index = 1;

            foreach (var state in gridDocks)
            {
                var pressed = state.Entity == DockingScreen.ViewedDock;
                var suffix = state.Connected ? Loc.GetString("shuttle-console-docked", ("index", index)) : $"{index}";

                var button = new Button
                {
                    Text = Loc.GetString("shuttle-console-dock-button", ("suffix", suffix)),
                    ToggleMode = true,
                    Pressed = pressed,
                    Margin = new Thickness(0f, 1f)
                };

                if (pressed)
                    _selectedDock = button;

                button.OnMouseEntered += args => OnDockMouseEntered(args, state);
                button.OnMouseExited += args => OnDockMouseExited(args, state);
                button.OnToggled += args => OnDockToggled(args, state);
                DockPorts.AddChild(button);
                index++;
            }
        }
    }

    private void OnDockMouseEntered(GUIMouseHoverEventArgs obj, DockingInterfaceState state)
    {
        RadarScreen.HighlightedDock = state.Entity;
    }

    private void OnDockMouseExited(GUIMouseHoverEventArgs obj, DockingInterfaceState state)
    {
        RadarScreen.HighlightedDock = null;
    }

    /// <summary>
    ///     Shows a docking camera instead of radar screen.
    /// </summary>
    private void OnDockToggled(BaseButton.ButtonEventArgs obj, DockingInterfaceState state)
    {
        var ent = state.Entity;

        if (_selectedDock != null)
        {
            // If it got untoggled via other means then we'll stop viewing the old dock.
            if (DockingScreen.ViewedDock != null && DockingScreen.ViewedDock != state.Entity)
                StopAutodockPressed?.Invoke(DockingScreen.ViewedDock.Value);

            _selectedDock.Pressed = false;
            _selectedDock = null;
        }

        if (!obj.Button.Pressed)
        {
            if (DockingScreen.ViewedDock != null)
            {
                StopAutodockPressed?.Invoke(DockingScreen.ViewedDock.Value);
                DockingScreen.ViewedDock = null;
            }

            UndockButton.Disabled = true;
            DockingScreen.Visible = false;
            RadarScreen.Visible = true;
        }
        else
        {
            if (_shuttleUid != null)
            {
                DockingScreen.Coordinates = state.Coordinates;
                DockingScreen.Angle = state.Angle;
            }
            else
            {
                DockingScreen.Coordinates = null;
                DockingScreen.Angle = null;
            }

            UndockButton.Disabled = false;
            RadarScreen.Visible = false;
            DockingScreen.Visible = true;
            DockingScreen.ViewedDock = ent;
            StartAutodockPressed?.Invoke(ent);
            DockingScreen.GridEntity = _shuttleUid;
            _selectedDock = obj.Button;
        }
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        if (!_entManager.TryGetComponent<PhysicsComponent>(_shuttleUid, out var gridBody) ||
            !_entManager.TryGetComponent<TransformComponent>(_shuttleUid, out var gridXform))
            return;

        var (_, worldRot, worldMatrix) = gridXform.GetWorldPositionRotationMatrix();
        var worldPos = worldMatrix.Transform(gridBody.LocalCenter);

        // Get the positive reduced angle.
        var displayRot = -worldRot.Reduced();

        GridPosition.Text = $"{worldPos.X:0.0}, {worldPos.Y:0.0}";
        GridOrientation.Text = $"{displayRot.Degrees:0.0}";

        var gridVelocity = gridBody.LinearVelocity;
        gridVelocity = displayRot.RotateVec(gridVelocity);
        // Get linear velocity relative to the console entity
        GridLinearVelocity.Text = $"{gridVelocity.X:0.0}, {gridVelocity.Y:0.0}";
        GridAngularVelocity.Text = $"{-gridBody.AngularVelocity:0.0}";
    }
}
